{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Question: 
\f1 \cf2 \expnd0\expndtw0\kerning0
Which architecture would you use for the required task below? Why? \
Answer: After studying the component and it\'92s requirements, I think the best architecture would be MVVM-C,\
As the component has a lot of events and interactivity with user, so MVVM would be great for mapping those events or interactions into streams with the help of reactive programming, and this will simplify our code also MVVM is great with testing, and MVVM provides good decoupling between view and logic, so not why MVC, or MVP, or VIPER,MVC Fits best with very small applications when logic becomes bigger we get into Massive View Controller problem, and in the component the logic is not small, if we are talking about MVP and VIPER they fit with medium and large projects well, but when components have a lot of interactivity with user code becomes messy, but if most of components are viewing and submitting data with small events and interactivity they fit well.}